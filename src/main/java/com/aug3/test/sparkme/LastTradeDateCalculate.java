package com.aug3.test.sparkme;

import java.util.Calendar;

import org.apache.hadoop.conf.Configuration;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.bson.BSONObject;
import org.bson.BasicBSONObject;

import scala.Tuple2;

import com.mongodb.hadoop.MongoOutputFormat;

/**
 * 
 * @author Roger.xia
 *
 */
public class LastTradeDateCalculate {

	public static void main(String[] args) {

		JavaSparkContext sc = new JavaSparkContext("local", "lastTradeDate-calculate");

		Configuration config = new Configuration();
		config.set("mongo.input.uri", "mongodb://192.168.0.222:27017/ada.dict_calendar");
		config.set("mongo.output.uri", "mongodb://192.168.0.222:27017/metrics.last_trade_date");

		JavaPairRDD<Object, BSONObject> mongoRDD = sc.newAPIHadoopRDD(config,
				com.mongodb.hadoop.MongoInputFormat.class, Object.class, BSONObject.class);

		// Input contains tuples of (ObjectId, BSONObject)
		JavaPairRDD<Object, BSONObject> tradeRDD = mongoRDD.filter(docs -> ((int) docs._2().get("trad")) == 1);

		JavaPairRDD<String, String> weekRDD = tradeRDD.mapToPair(docs -> {
			String dt = (String) docs._2().get("dt");
			String[] ymd = dt.split("-");
			Calendar c = Calendar.getInstance();
			c.set(Integer.parseInt(ymd[0]), Integer.parseInt(ymd[1]) - 1, Integer.parseInt(ymd[2]));
			int wy = c.get(Calendar.WEEK_OF_YEAR);
			return new Tuple2(ymd[0] + "_" + wy, dt);
		});

		JavaPairRDD<String, String> wkRDD = weekRDD.reduceByKey((a, b) -> a.compareTo(b) >= 0 ? a : b);

		// Output contains tuples of (null, BSONObject) - ObjectId will be
		// generated by Mongo driver if null
		JavaPairRDD<Object, BSONObject> weekSave = wkRDD.mapToPair(tuple -> {
			BSONObject bson = new BasicBSONObject();
			String[] yw = tuple._1().split("_");
			bson.put("y", Integer.parseInt(yw[0]));
			bson.put("w", Integer.parseInt(yw[1]));
			bson.put("dt", tuple._2);
			return new Tuple2<>(null, bson);
		});

		// Only MongoOutputFormat and config are relevant
		weekSave.saveAsNewAPIHadoopFile("", Object.class, Object.class, MongoOutputFormat.class, config);

	}
}
